/** This script is generated by scripts/build-app.js */

/************************ entry.js ************************/
/** last changed: 2020.5.3 */

/** States **/
const Shuang = {
  resource: {
    dict: {},
    schemeList: {},
    scheme: {},
    emoji: {
      right: '✅', wrong: '❎'
    }
  },
  core: {
    model: {},
    current: {},
    order: {
      shengIndex: 0,
      yunIndex: 0
    },
    history: []
  },
  app: {
    setting: {
      config: {},
      reload() { }
    },
    staticJS: 0,
    modeList: [],
    action: {}
  }
}

const $ = document.querySelector.bind(document)
const $$ = document.querySelectorAll.bind(document)

function importJS(src = '', onload = () => { Shuang.app.staticJS++ }) {
  src = `build/${src}.min.js`
  const newScript = document.createElement('script')
  Object.assign(newScript, { src, onload })
  document.body.appendChild(newScript)
}
/******************** EOF entry.js ************************/
/************************ dict.js ************************/
/** last changed: 2018.11.10 */

/**
 *
 * dict 包含所有声母，list 为其列表数组
 *
 * dict.{声母} 包含所有韵母，list 为其列表数组
 *
 * dict.{声母}.{韵母} 包含其汉字样例
 *                   [{生僻字 / 多音字}] 将不会在无拼音模式中出现
 *
 */

Shuang.resource.dict = {
  "a": {
    ";": "也",
    "g": "啊",
    "n": "暗",
    "n": "阿",
    "o": "安",
    "u": "按",
    "w": "爱"
  },
  "b": {
    ";": "不",
    "a": "薄",
    "b": "办",
    "c": "编",
    "d": "败",
    "e": "备",
    "f": "北",
    "g": "别",
    "h": "奔",
    "i": "被",
    "j": "帮",
    "k": "比",
    "l": "霸",
    "m": "本",
    "n": "巴",
    "o": "宝",
    "q": "兵",
    "r": "笔",
    "s": "波",
    "t": "般",
    "u": "部",
    "v": "避",
    "w": "八",
    "y": "半"
  },
  "c": {
    ";": "成",
    "a": "藏",
    "d": "财",
    "e": "处",
    "f": "楚",
    "g": "吃",
    "h": "传",
    "i": "初",
    "j": "错",
    "k": "车",
    "l": "场",
    "m": "刺",
    "n": "承",
    "o": "察",
    "p": "闯",
    "q": "川",
    "s": "沉",
    "t": "船",
    "u": "冲",
    "v": "层",
    "w": "采",
    "x": "参",
    "y": "差"
  },
  "d": {
    ";": "的",
    "b": "刀",
    "d": "电",
    "e": "独",
    "f": "点",
    "h": "代",
    "j": "毒",
    "k": "顿",
    "l": "地",
    "m": "顶",
    "n": "队",
    "o": "斗",
    "r": "答",
    "s": "淡",
    "u": "店",
    "v": "导",
    "y": "断"
  },
  "e": {
    ";": "而",
    "d": "恩",
    "e": "儿",
    "j": "二",
  },
  "f": {
    ";": "分",
    "a": "范",
    "b": "飞",
    "c": "服",
    "e": "凤",
    "f": "非",
    "h": "佛",
    "i": "房",
    "j": "夫",
    "k": "副",
    "l": "封",
    "n": "防",
    "o": "富",
    "r": "复",
    "s": "法",
    "t": "反",
    "u": "放",
    "v": "费",
    "w": "父"
  },
  "g": {
    ";": "个",
    "b": "姑",
    "c": "红",
    "d": "贵",
    "e": "够",
    "f": "格",
    "g": "跟",
    "i": "该",
    "j": "规",
    "k": "光",
    "l": "赶",
    "m": "故",
    "o": "宫",
    "q": "鬼",
    "r": "告",
    "s": "港",
    "u": "高",
    "v": "敢",
    "w": "谷",
    "x": "观",
    "y": "关"
  },
  "h": {
    ";": "和",
    "a": "花",
    "b": "婚",
    "c": "缓",
    "d": "黑",
    "e": "忽",
    "f": "虎",
    "g": "呼",
    "h": "化",
    "i": "很",
    "j": "环",
    "k": "互",
    "m": "黄",
    "n": "孩",
    "o": "寒",
    "q": "皇",
    "s": "海",
    "t": "后",
    "u": "护",
    "w": "乎",
    "x": "欢",
    "y": "火"
  },
  "i": {
    ";": "以",
  },
  "j": {
    ";": "就",
    "a": "警",
    "b": "加",
    "c": "结",
    "d": "见",
    "e": "及",
    "f": "禁",
    "g": "叫",
    "h": "件",
    "i": "记",
    "j": "静",
    "l": "境",
    "m": "救",
    "n": "景",
    "o": "举",
    "p": "间",
    "r": "简",
    "s": "激",
    "t": "近",
    "u": "技",
    "v": "即",
    "x": "劲",
    "y": "精"
  },
  "k": {
    ";": "可",
    "a": "苦",
    "d": "困",
    "e": "狂",
    "f": "卡",
    "g": "口",
    "j": "开",
    "l": "块",
    "m": "克",
    "o": "客",
    "r": "科",
    "u": "刻"
  },
  "l": {
    ";": "了",
    "a": "临",
    "b": "力",
    "c": "练",
    "d": "略",
    "e": "乐",
    "f": "林",
    "g": "路",
    "h": "列",
    "i": "良",
    "k": "连",
    "l": "露",
    "m": "两",
    "n": "量",
    "r": "利",
    "s": "泪",
    "u": "拉",
    "v": "灵",
    "y": "类"
  },
  "m": {
    ";": "们",
    "a": "莫",
    "b": "妙",
    "c": "买",
    "d": "默",
    "e": "猛",
    "f": "模",
    "g": "吗",
    "h": "面",
    "m": "某",
    "n": "明",
    "o": "慢",
    "p": "门",
    "r": "每",
    "r": "秘",
    "s": "没",
    "u": "魔",
    "v": "民",
    "y": "美"
  },
  "n": {
    ";": "你",
    "b": "娘",
    "c": "脑",
    "d": "内",
    "g": "呢",
    "h": "念",
    "i": "农",
    "j": "弄",
    "m": "南",
    "o": "宁",
    "r": "年",
    "v": "那",
    "x": "难"
  },
  "o": {
    ";": "我",
    "k": "欧"
  },
  "p": {
    ";": "平",
    "b": "皮",
    "c": "朋",
    "g": "品",
    "h": "破",
    "m": "配",
    "o": "怕",
    "q": "片",
    "s": "派",
    "t": "盘",
    "u": "旁",
    "y": "普"
  },
  "q": {
    ";": "起",
    "d": "且",
    "g": "器",
    "h": "企",
    "i": "请",
    "j": "钱",
    "k": "切",
    "l": "去",
    "m": "取",
    "o": "情",
    "r": "千",
    "s": "清",
    "u": "亲",
    "v": "群",
    "y": "前"
  },
  "r": {
    ";": "人",
    "a": "若",
    "e": "然",
    "h": "仍",
    "i": "认",
    "k": "软",
    "n": "日",
    "o": "容",
    "u": "热",
    "w": "入",
    "x": "柔"
  },
  "s": {
    ";": "是",
    "a": "苏",
    "b": "始",
    "c": "书",
    "d": "四",
    "e": "色",
    "f": "松",
    "g": "师",
    "h": "使",
    "i": "说",
    "j": "示",
    "k": "少",
    "l": "声",
    "m": "散",
    "n": "时",
    "o": "室",
    "p": "闪",
    "q": "顺",
    "r": "失",
    "s": "水",
    "t": "所",
    "u": "商",
    "v": "司",
    "w": "受",
    "y": "数"
  },
  "t": {
    ";": "他",
    "c": "脱",
    "d": "图",
    "e": "条",
    "g": "跳",
    "j": "替",
    "k": "堂",
    "l": "土",
    "n": "题",
    "o": "突",
    "r": "特",
    "u": "托",
    "v": "退",
    "w": "逃",
    "x": "台"
  },
  "u": {
    ";": "有",
    "a": "要",
    "b": "吧",
    "c": "重",
    "d": "第",
    "e": "久",
    "f": "会",
    "g": "长",
    "i": "拿",
    "q": "自",
    "r": "如",
    "s": "她",
    "t": "体",
    "u": "应",
    "v": "种",
    "w": "于",
    "x": "对",
    "z": "正"
  },
  "v": {
    ";": "这"
  },
  "w": {
    ";": "为",
    "c": "维",
    "d": "围",
    "e": "务",
    "g": "味",
    "h": "位",
    "i": "微",
    "j": "武",
    "k": "万",
    "m": "五",
    "n": "卫",
    "o": "完",
    "p": "问",
    "r": "物",
    "s": "温",
    "u": "忘",
    "v": "屋",
  },
  "x": {
    ";": "想",
    "b": "姓",
    "c": "乡",
    "e": "系",
    "g": "响",
    "h": "仙",
    "i": "谢",
    "j": "型",
    "l": "喜",
    "m": "醒",
    "n": "晓",
    "o": "性",
    "q": "息",
    "r": "选",
    "s": "消",
    "t": "须",
    "u": "效",
    "v": "寻",
    "w": "希",
    "x": "习"
  },
  "y": {
    ";": "一",
    "a": "营",
    "c": "验",
    "d": "野",
    "e": "迎",
    "f": "杨",
    "g": "员",
    "j": "元",
    "k": "医",
    "l": "越",
    "m": "燕",
    "r": "移",
    "s": "演",
    "u": "摇",
    "v": "异",
    "y": "烟"
  },
  "z": {
    ";": "在",
    "a": "著",
    "c": "终",
    "d": "中",
    "e": "争",
    "f": "止",
    "g": "咱",
    "h": "做",
    "i": "证",
    "j": "珠",
    "k": "转",
    "l": "赵",
    "m": "再",
    "n": "子",
    "o": "字",
    "q": "追",
    "s": "注",
    "t": "质",
    "u": "资",
    "v": "张",
    "y": "州"
  }
}
Object.entries(Shuang.resource.dict).forEach(([sheng, yunList]) => Shuang.resource.dict[sheng].list = Object.keys(yunList))
Shuang.resource.dict.list = Object.keys(Shuang.resource.dict)
/******************** EOF dict.js ************************/
/************************ scheme-list.js ************************/
/** last changed: 2022.3.2 */
/*
  超强二笔方案
  原版二笔方案*
  其它二笔方案**
 */

Shuang.resource.schemeList = {
  cqkm: '超强快码'
}
/******************** EOF scheme-list.js ************************/
/************************ mode-list.js ************************/
/** last changed: 2018.11.10 */

Shuang.app.modeList = {
  'all-random': {
    name: '全部随机', desc: '全部拼音组合'
  },
  'all-order': {
    name: '全部顺序', desc: '全部拼音组合'
  },
  'hard-random': {
    name: '困难随机', desc: '韵母需转换'
  },
  'hard-random-without-pinyin': {
    name: '无拼音', desc: '无拼音提示'
  }
}
/******************** EOF mode-list.js ************************/
/************************ core.js ************************/
/** last changed: 2019.8.23 */

Shuang.core.model = class Model {
  constructor(sheng = '', yun = '') {
    this.sheng = sheng.toLowerCase()
    this.yun = yun.toLowerCase()
    this.dict = Shuang.resource.dict[this.sheng][this.yun]
    this.scheme = new Set()
    this.view = {
      sheng: this.sheng.toUpperCase().slice(0, 1) + this.sheng.slice(1),
      yun: this.yun
    }
  }
  
  beforeJudge() {
    this.scheme.clear()
    const schemeName = Shuang.app.setting.config.scheme
    const schemeDetail = Shuang.resource.scheme[schemeName].detail
    const pinyin = this.sheng + this.yun
    if (schemeDetail.other[pinyin]) {
      if (Array.isArray(schemeDetail.other[pinyin])) {
        schemeDetail.other[pinyin].forEach(other => this.scheme.add(other))
      } else {
        this.scheme.add(schemeDetail.other[pinyin])
      }
    } else {
      for (const s of schemeDetail.sheng[this.sheng]) {
        for (const y of schemeDetail.yun[this.yun]) {
          this.scheme.add(s + y)
        }
      }
      if (this.yun === 'u' && 'jqxy'.includes(this.sheng)) {
        for (const s of schemeDetail.sheng[this.sheng]) {
          for (const y of schemeDetail.yun.v) {
            this.scheme.add(s + y)
          }
        }
      }
    }
  }
  
  judge(sheng = '', yun = '') {
    this.beforeJudge()
    return this.scheme.has(sheng.toLowerCase() + yun.toLowerCase())
  }
  
  static getRandom() {
    const sheng = Shuang.resource.dict.list[Math.floor(Math.random() * Shuang.resource.dict.list.length)]
    const yun = Shuang.resource.dict[sheng].list[Math.floor(Math.random() * Shuang.resource.dict[sheng].list.length)]
    const instance = new Model(sheng, yun)
    return Model.isSame(instance, Shuang.core.current) ? Model.getRandom() : instance
  }
  
  static getHardRandom() {
    let instance = undefined
    do {
      instance = Model.getRandom()
    } while (instance.sheng === '' || instance.yun.length === 1)
    return instance
  }
  
  static getByOrder() {
    while (true) {
      const sheng = Shuang.resource.dict.list[Shuang.core.order.shengIndex]
      if (sheng !== undefined) {
        const yun = Shuang.resource.dict[sheng].list[Shuang.core.order.yunIndex]
        if (yun) {
          Shuang.core.order.yunIndex++
          return new Model(sheng, yun)
        }
      }
      if (Shuang.core.order.yunIndex === 0) {
        Shuang.core.order.shengIndex = 0
      } else {
        Shuang.core.order.shengIndex++
        Shuang.core.order.yunIndex = 0
      }
    }
  }
  
  static isSame(a, b) {
    return a.sheng === b.sheng && a.yun === b.yun
  }
}
/******************** EOF core.js ************************/
/************************ setting.js ************************/
/** last changed: 2022.3.6 */

Shuang.app.setting = {
  config: {},
  reload() {
    /** Reading Storage or Using Default **/
    this.config = {
      scheme: readStorage('scheme') || 'cqkm',
      mode: readStorage('mode') || 'all-random',
      showPic: readStorage('showPic') || 'true',
      darkMode: readStorage('darkMode') || detectDarkMode().toString(),
      autoNext: readStorage('autoNext') || 'true',
      autoClear: readStorage('autoClear') || 'true',
      showKeys: readStorage("showKeys") || "true",
      showPressedKey: readStorage("showPressedKey") || "true",
      disableMobileKeyboard: readStorage("disableMobileKeyboard") || "false",
    }
    /** Applying Settings :: Changing UI **/
    const { scheme, mode, showPic, darkMode, autoNext, autoClear, showKeys, showPressedKey, disableMobileKeyboard } = this.config
    Array.prototype.find.call($('#scheme-select').children,
      schemeOption => Shuang.resource.schemeList[scheme].startsWith(schemeOption.innerText)
    ).selected = true
    $('#mode-select')[Object.keys(Shuang.app.modeList).indexOf(mode)].selected = true
    $('#pic-switcher').checked = showPic === 'true'
    $('#dark-mode-switcher').checked = darkMode === 'true'
    $('#auto-next-switcher').checked = autoNext === 'true'
    $('#auto-clear-switcher').checked = autoClear === 'true'
    $('#show-keys').checked = showKeys === 'true'
    $('#show-pressed-key').checked = showPressedKey === 'true'
    $('#disable-mobile-keyboard').checked = disableMobileKeyboard === 'true'
    /** Applying Settings :: Invoking Actions  **/
    this.setScheme(Shuang.resource.schemeList[scheme], false)
    this.setMode(Shuang.app.modeList[mode].name)
    this.setPicVisible(showPic)
    this.setDarkMode(darkMode)
    this.setAutoNext(autoNext)
    this.setAutoClear(autoClear)
    this.setShowKeys(showKeys)
    this.setShowPressedKey(showPressedKey)
    this.setDisableMobileKeyboard(disableMobileKeyboard)
  },
  setScheme(schemeName, next = true) {
    this.config.scheme = Object.keys(Shuang.resource.schemeList)[
      Object.values(Shuang.resource.schemeList)
        .findIndex(scheme => scheme.startsWith(schemeName))
    ]
    importJS('scheme/' + this.config.scheme, () => {
      if (next) Shuang.app.action.next()
      Shuang.core.current.beforeJudge()
      this.updateKeysHint()
      this.updateTips()
    })
    writeStorage('scheme', this.config.scheme)
  },
  setMode(modeName) {
    Shuang.core.history = []
    for (const [mode, { name }] of Object.entries(Shuang.app.modeList)) {
      if (name === modeName) {
        this.config.mode = mode
        $('#mode-desc').innerText = Shuang.app.modeList[mode].desc
        if (mode === 'hard-random-without-pinyin') {
          $('#q').style.display = 'none'
        } else {
          $('#q').style.display = 'block'
        }
        break
      }
    }
    writeStorage('mode', this.config.mode)
  },
  setPicVisible(bool) {
    this.config.showPic = bool.toString()
    if (this.config.showPic === 'false') {
      $('#keyboard').style.display = 'none'
      $('#pic-placeholder').style.display = 'none'
    } else if (this.config.showPic === 'true') {
      $('#keyboard').style.display = 'block'
      $('#pic-placeholder').style.display = 'block'
    }
    writeStorage('showPic', this.config.showPic)
    this.updateKeysHintLayoutRatio()
  },
  setDarkMode(bool) {
    this.config.darkMode = bool.toString()
    if (this.config.darkMode === 'true') {
      $('body').setAttribute('class', 'dark-mode')
    } else if (this.config.darkMode === 'false') {
      $('body').setAttribute('class', '')
    }
    writeStorage('darkMode', this.config.darkMode)
  },
  setAutoNext(bool) {
    this.config.autoNext = bool.toString()
    writeStorage('autoNext', this.config.autoNext)
  },
  setAutoClear(bool) {
    this.config.autoClear = bool.toString()
    writeStorage('autoClear', this.config.autoClear)
  },
  setShowKeys(bool) {
    this.config.showKeys = bool.toString()
    writeStorage('showKeys', this.config.showKeys)
    this.updateKeysHint()
  },
  setShowPressedKey(bool) {
    this.config.showPressedKey = bool.toString()
    writeStorage('showPressedKey', this.config.showPressedKey)
  },
  setDisableMobileKeyboard(bool) {
    this.config.disableMobileKeyboard = bool.toString()
    if (this.config.disableMobileKeyboard === 'true') {
      $('#a').setAttribute('inputmode', 'none')
    } else if (this.config.disableMobileKeyboard === 'false') {
      $('#a').setAttribute('inputmode', 'text')
    }
    writeStorage('disableMobileKeyboard', this.config.disableMobileKeyboard)
  },
  updateKeysHint() {
    const keys = $$('.key')
    for (const key of keys) {
      key.classList.remove('answer')
    }
    if (this.config.showKeys === 'false') return
    const qwerty = 'qwertyuiopasdfghjkl;zxcvbnm'
    for (const [sheng, yun] of Shuang.core.current.scheme) {
      keys[qwerty.indexOf(sheng)].classList.add('answer')
      keys[qwerty.indexOf(yun)].classList.add('answer')
    }
    this.updateKeysHintLayoutRatio()
  },
  updateKeysHintLayoutRatio() {
    if ($('body').scrollWidth < 700) {
      const width = $('body').scrollWidth === 310 ? 310 : $('#pic').scrollWidth
      const ratio = 1874 / 1928 * width / 680
      if (navigator && navigator.userAgent && /firefox/i.test(navigator.userAgent)) {
        // Firefox 不支持 zoom
        $('#keys').style.transform = `scale(${ratio})`
        $('#keys').style.transformOrigin = `left top`
        $('#keys').style.margin = `${ratio * 10}px`
        $('#pic-placeholder').style.height = `${width / 680 * 300}px`
      } else {
        $('#keys').style.marginLeft = '10px'
        $('#keys').style.zoom = ratio
        $('#pic-placeholder').style.zoom = ratio
      }
    } else {
      if (navigator && navigator.userAgent && /firefox/i.test(navigator.userAgent)) {
        // Firefox 不支持 zoom
        $('#keys').style.transform = 'unset'
        $('#keys').style.transformOrigin = 'unset'
        $('#pic-placeholder').style.height = '300px'
        $('#keys').style.margin = `10px auto`
      } else {
        $('#keys').style.marginLeft = 'auto'
        $('#keys').style.zoom = 'unset'
        $('#pic-placeholder').style.zoom = 'unset'
      }
    }
  },
  updatePressedKeyHint(k) {
    if (this.config.showPressedKey === 'false' || !k) return
    const keys = $$('.key')
    for (const key of keys) {
      key.classList.remove('pressed')
    }
    const qwerty = 'qwertyuiopasdfghjkl;zxcvbnm'
    const index = qwerty.indexOf(k.toLowerCase())
    if (index === -1) return
    keys[index].classList.add('pressed')
    setTimeout(() => {
      keys[index].classList.remove('pressed')
    }, 250)
  },
  updateTips() {
    const tips = $('#tips')
    tips.innerHTML = ''
    const currentScheme = Shuang.resource.scheme[this.config.scheme]
    if (currentScheme.tips) {
      const tipsToView = Array.isArray(currentScheme.tips) ? currentScheme.tips : [currentScheme.tips]
      for (const tip of tipsToView) {
        const newLine = document.createElement('div')
        newLine.classList.add('line')
        newLine.innerHTML = tip
        tips.appendChild(newLine)
      }
    }
    // $('#pic').setAttribute('src', `img/${this.config.scheme}.png`)
    $('#pic').setAttribute('src', `img/${this.config.scheme}.svg`)
  }
}

function detectDarkMode() {
  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
    return true
  }
  if (new Date().getHours() < 6 || new Date().getHours() > 22) {
    return true
  }
  return false
}

function readStorage(key = '') { return localStorage.getItem(key) }
function writeStorage(key = '', value = '') { localStorage.setItem(key, value) }
/******************** EOF setting.js ************************/
/************************ action.js ************************/
/** last changed: 2022.3.6 */

Shuang.app.action = {
  init() {
    /** Update Resources **/
    if (navigator && navigator.userAgent && /windows|linux/i.test(navigator.userAgent)) {
      Shuang.resource.emoji = { right: '✔️', wrong: '❌' }
    }

    /** Rendering **/
    function renderSelect(target, options, callback) {
      options.forEach(option => {
        const opt = document.createElement('option')
        if (option.disabled) opt.setAttribute('disabled', 'disabled')
        opt.innerText = option.text || option
        target.appendChild(opt)
      })
      target.onchange = e => {
        callback(e.target.value)
      }
    }

    const schemeList = Object.values(Shuang.resource.schemeList)
    const schemes = {
      common: schemeList.filter(scheme => !scheme.endsWith('*')),
      uncommon: schemeList
        .filter(scheme => scheme.endsWith('*') && !scheme.endsWith('**'))
        .map(scheme => scheme.slice(0, -1))
      ,
      rare: schemeList
        .filter(scheme => scheme.endsWith('**'))
        .map(scheme => scheme.slice(0, -2))
    }
    const schemeOptions = [
      { disabled: true, text: '超强系列' },
      ...schemes.common,
//    { disabled: true, text: '原版二笔' },
//    ...schemes.uncommon,
//    { disabled: true, text: '其它二笔' },
//    ...schemes.rare,
    ]

    renderSelect($('#scheme-select'), schemeOptions, value => {
      Shuang.app.setting.setScheme(value)
    })
    renderSelect($('#mode-select'), Object.values(Shuang.app.modeList).map(mode => mode.name), value => {
      Shuang.app.setting.setMode(value)
      this.next()
    })

    /** Setting First Question **/
    Shuang.core.current = new Shuang.core.model('l', 'm')
    $('#q').innerText = Shuang.core.current.view.sheng + Shuang.core.current.view.yun
    $('#dict').innerText = Shuang.core.current.dict

    /** Reset Configs **/
    Shuang.app.setting.reload()

    /** Listen Events **/
    document.addEventListener('keydown', e => {
      if (['Backspace', 'Tab', 'Enter', ' '].includes(e.key)) {
        if (e.preventDefault) {
          e.preventDefault()
        } else {
          event.returnValue = false
        }
      }
    })
    document.addEventListener('keyup', e => {
      this.keyPressed(e)
    })
    $('#pic-switcher').addEventListener('change', e => {
      Shuang.app.setting.setPicVisible(e.target.checked)
    })
    $('#dark-mode-switcher').addEventListener('change', e => {
      Shuang.app.setting.setDarkMode(e.target.checked)
    })
    $('#auto-next-switcher').addEventListener('change', e => {
      Shuang.app.setting.setAutoNext(e.target.checked)
    })
    $('#auto-clear-switcher').addEventListener('change', e => {
      Shuang.app.setting.setAutoClear(e.target.checked)
    })
    $('#show-keys').addEventListener('change', e => {
      Shuang.app.setting.setShowKeys(e.target.checked)
    })
    $('#show-pressed-key').addEventListener('change', e => {
      Shuang.app.setting.setShowPressedKey(e.target.checked)
    })
    $('#disable-mobile-keyboard').addEventListener('change', e => {
      Shuang.app.setting.setDisableMobileKeyboard(e.target.checked)
    })
    $('.pay-name#alipay').addEventListener('mouseover', () => {
      Shuang.app.action.qrShow('alipay-qr')
    })
    $('#alipay-qr').addEventListener('click', e => {
      Shuang.app.action.qrHide(e.target)
    })
    $('#alipay-qr').addEventListener('mouseout', e => {
      Shuang.app.action.qrHide(e.target)
    })
    $('.pay-name#wxpay').addEventListener('mouseover', () => {
      Shuang.app.action.qrShow('wxpay-qr')
    })
    $('#wxpay-qr').addEventListener('click', e => {
      Shuang.app.action.qrHide(e.target)
    })
    $('#wxpay-qr').addEventListener('mouseout', e => {
      Shuang.app.action.qrHide(e.target)
    })
    $('#wx-name').addEventListener('mouseover', () => {
      Shuang.app.action.qrShow('wx-qr')
    })
    $('#wx-qr').addEventListener('click', e => {
      Shuang.app.action.qrHide(e.target)
    })
    $('#wx-qr').addEventListener('mouseout', e => {
      Shuang.app.action.qrHide(e.target)
    })
    $('#dict').addEventListener('click', () => {
      Shuang.core.current.beforeJudge()
      $('#a').value = Shuang.core.current.scheme.values().next().value
      this.judge()
    })
    window.addEventListener('resize', Shuang.app.setting.updateKeysHintLayoutRatio)
    window.resizeTo(window.outerWidth, window.outerHeight)

    /** Simulate Keyboard */
    const keys = $$('.key')
    const qwerty = 'qwertyuiopasdfghjkl;zxcvbnm'
    for (let i = 0; i < keys.length; i++) {
      keys[i].addEventListener('click', () => {
        const event = new KeyboardEvent('keyup', { key: qwerty[i].toUpperCase()})
        event.simulated = true
        document.dispatchEvent(event)
      })
    }

    /** All Done **/
    this.redo()
  },
  keyPressed(e) {
    switch (e.key) {
      case 'Backspace':
        this.redo()
        break
      case 'Tab':
        Shuang.core.current.beforeJudge()
        $('#a').value = Shuang.core.current.scheme.values().next().value
        this.judge()
        break
      case 'Enter':
      case ' ':
        if (this.judge()) {
          this.next()
        } else {
          this.redo()
        }
        break
      default:
        if (e.simulated) {
          $('#a').value += e.key.toLowerCase()
        }
        $('#a').value = $('#a').value
          .slice(0, 2)
          .replace(/[^a-zA-Z;]/g, '')
          .split('')
          .map((c, i) => i === 0 ? c.toUpperCase() : c.toLowerCase())
          .join('')
        Shuang.app.setting.updatePressedKeyHint(e.key)
        const canAuto = $('#a').value.length === 2
        const isRight = this.judge()
        if (canAuto) {
          if (isRight && Shuang.app.setting.config.autoNext === 'true') {
            this.next(e.simulated)
          } else if (!isRight && Shuang.app.setting.config.autoClear === 'true') {
            this.redo(e.simulated)
          }
        }
    }
  },
  judge() {
    const input = $('#a')
    const btn = $('#btn')
    const [sheng, yun] = input.value
    if (yun && Shuang.core.current.judge(sheng, yun)) {
      btn.onclick = () => this.next(true)
      btn.innerText = Shuang.resource.emoji.right
      return true
    } else {
      btn.onclick = () => this.redo(true)
      btn.innerText = Shuang.resource.emoji.wrong
      return false
    }
  },
  redo(noFocus) {
    $('#a').value = ''
    if (!noFocus) $('#a').focus()
    $('#btn').onclick = () => this.redo(noFocus)
    $('#btn').innerText = Shuang.resource.emoji.wrong
  },
  next(noFocus) {
    this.redo(noFocus)
    switch (Shuang.app.setting.config.mode) {
      case 'all-random':
        Shuang.core.current = Shuang.core.model.getRandom()
        break
      case 'all-order':
        Shuang.core.current = Shuang.core.model.getByOrder()
        break
      case 'hard-random':
        Shuang.core.current = Shuang.core.model.getRandom()
        break
      case 'hard-random-without-pinyin':
        do {
          Shuang.core.current = Shuang.core.model.getRandom()
        } while (Array.isArray(Shuang.core.current.dict))
        break
    }
    if (Shuang.core.history.includes(Shuang.core.current.sheng + Shuang.core.current.yun)) this.next()
    else Shuang.core.history = [...Shuang.core.history, Shuang.core.current.sheng + Shuang.core.current.yun].slice(-100)
    $('#q').innerText = Shuang.core.current.view.sheng + Shuang.core.current.view.yun
    $('#dict').innerText = Shuang.core.current.dict

    // Update Keys Hint
    Shuang.core.current.beforeJudge()
    Shuang.app.setting.updateKeysHint()
  },
  qrShow(targetId) {
    $('#' + targetId).style.display = 'block'
  },
  qrHide(target) {
    target.style.display = 'none'
  }
}
/******************** EOF action.js ************************/
/************************ - ************************/
Shuang.app.action.init()
/******************** EOF - ************************/
